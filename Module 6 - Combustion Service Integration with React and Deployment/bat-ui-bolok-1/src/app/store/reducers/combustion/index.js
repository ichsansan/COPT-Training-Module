const { SET_COMBUSTION } = require('app/store/constants');

const TODAY = new Date();
const DATE = new Date();
const LAST_MONTH = DATE.setDate(DATE.getDate() - 30);

const initialState = {
  filterStartDate: LAST_MONTH,
  filterEndDate: TODAY,
  combustionEnabled: 0,
  combustionWatchdog: 0,
  combustionSafeguard: 0,
  combustionRecommendationTime: '',
  combustionRecommendationData: [],

  combustionSafeguardHistoryData: [],
  combustionSafeguardAddressNumber: '',
  combustionSafeguardHistoryTotal: 0,
  combustionSafeguardHistoryPage: 0,
  combustionSafeguardHistoryLimit: 10,
  combustionSuggestionAsTestData: { area: '', trigger: '' },

  combustionSafeguardDetailRuleValue: '',
  combustionSafeguardDetailRuleLogic: '',
  combustionSafeguardDetailRuleData: [],
  combustionSafeguardLabel: '',

  combustionParameterSettingData: [],
  combustionParameterDetailData: [],

  combustionRulesData: [],
  combustionRuleDetail: [],
  combustionRuleDetailData: {
    label: '',
    subLabel: '',
    id: '',
    isActive: '',
    updateAt: '',
    updateBy: '',
    presetList: [],
    presetId: '',
  },
  combustionNewPresetName: '',
  combustionRuleSelectedPreset: '',
  combustionRuleTags: [],

  combustionAlarmHistoryData: [],
  combustionAlarmHistoryDetailData: {},
  combustionAlarmHistoryLimit: 100,
  combustionAlarmHistoryPage: 0,
  combustionAlarmHistoryTotal: 0,
  hasMoreAlarmHistory: true,

  combustionBypassStatusDetailData: {},
  combustionBypassStatusData: [],
  loadingBypassStatusUpdate: false,
  loadingBypassStatus: false,
  errorGetDetailBypassStatus: false,
  errorBypassStatus: false,

  combustionTags: {
    bat_o2_bias: '-',
    bias_accepted_btn: '-',
    bias_rejected_btn: '-',
    boiler_efficeincy: '-',
    coal_bunker: '-',
    coal_cyclone: '-',
    coal_flow_1: '-',
    coal_flow_2: '-',
    coal_flow_3: '-',
    coal_furnace: '-',
    cold_id: '-',
    cold_pa: '-',
    cold_ret_a: '-',
    cold_ret_b: '-',
    cold_sa: '-',
    cold_slag: '-',
    cold_stack: '-',
    copt_disabled_btn: '-',
    copt_enabled_btn: '-',
    cyclone_left_inlet_pres: '-',
    cyclone_right_inlet_pres: '-',
    dcs_o2_bias: '-',
    drum_height_left: '0',
    drum_height_right: '0',
    drum_level_1: '-',
    drum_level_2: '-',
    drum_level_calc: '-',
    furnace_pressure_1: '-',
    furnace_pressure_2: '-',
    furnace_pressure_calc: '-',
    gross_load: '-',
    hot_aph: '-',
    hot_cyclone: '-',
    hot_pa: '-',
    hot_sa: '-',
    idf_a_damper_position: '-',
    idf_a_duration: '-',
    idf_a_motor_current: '-',
    idf_b_damper_position: '-',
    idf_b_duration: '-',
    idf_b_motor_current: '-',
    inlet_aph_o2: '-',
    outlet_aph_o2: '-',
    paf_a_damper_position: '-',
    paf_a_duration: '-',
    paf_a_motor_current: '-',
    paf_b_damper_position: '-',
    paf_b_duration: '-',
    paf_b_motor_current: '-',
    primary_air_flow: '-',
    primary_air_flow_a: '-',
    primary_air_flow_b: '-',
    return_fan_left_flow: '-',
    return_fan_left_motor_current: '-',
    return_fan_right_flow: '-',
    return_fan_right_motor_current: '-',
    rtf_a_duration: '-',
    rtf_b_duration: '-',
    saf_a_damper_position: '-',
    saf_a_duration: '-',
    saf_a_motor_current: '-',
    saf_b_damper_position: '-',
    saf_b_duration: '-',
    saf_b_motor_current: '-',
    secondary_air_flow: '-',
    secondary_air_flow_a: '-',
    secondary_air_flow_b: '-',
    total_air_flow: '-',
    total_coal_flow: '-',
    winbox_air_flow_a: '-',
    winbox_air_flow_b: '-',
    bed_temperature_a: '0',
    bed_temperature_b: '0',
    bed_temperature_c: '0',
    bed_temperature_d: '0',
    cyclone_left_temp: '0',
    cyclone_right_temp: '0',
  },

  loading: true,
  loadingRuleUpdate: false,
  loadingAlarmHistoryUpdate: false,
  loadingParameterUpdate: false,
  loadingCombustion: true,
  loadingAlarmHistory: true,
  loadingExport: false,
  errorExport: false,
  errorCombustion: false,
  errorAlarmHistory: false,
  errorGetDetailAlarmHistory: false,
  errorSafeguardDetailRule: false,
  error: '',
};

const combustionReducer = (state = initialState, action) => {
  switch (action.type) {
    case SET_COMBUSTION:
      return { ...state, ...action.payload };
    default:
      return state;
  }
};

export default combustionReducer;
